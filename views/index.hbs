<html class='dark'>
  <head>
    <meta charset='utf-8' />
    <title>Album AI - AI-First Album/Gallery</title>
    <meta
      name='description'
      content='AI-First Album: Auto generate image metadata and chat with album. RAG + Album.'
    />
    <meta name="keywords" content="Album, AI, Image, Video, OpenAI, Chat, RAG, Search, LLM">
    <script
      src='https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,container-queries'
    ></script>
    <script src='https://cdn.jsdelivr.net/npm/marked/marked.min.js'></script>
    <script>
    !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys getNextSurveyStep onSessionId setPersonProperties".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
    posthog.init('phc_3nnrsK6QJnbJJZSV7Qo7KU4Ey1jD0BQGbJinsIeVcfk',{api_host:'https://us.i.posthog.com', person_profiles: 'identified_only' // or 'always' to create profiles for anonymous users as well
        })
    </script>
    <script>
      tailwind.config = { darkMode: 'class', theme: { extend: { colors: {
      primary: '#3b82f6', } } } }
    </script>
    <style type='text/tailwindcss'>
      @layer utilities { .prose a { text-decoration: none; } .prose a:hover {
      text-decoration: none; } }
    </style>
  </head>
  <body class='dark:bg-zinc-900'>
    <div class='container mx-auto mb-10 px-4 prose dark:prose-invert'>
      {{#if query}}
        <!-- Search results page -->
        <header class='py-4 w-full '>
          <div class='flex items-center justify-between gap-4'>
            <h1 class='my-0 py-0 mr-4'>
              <a href='/' class='text-primary font-bold text-xl my-0'>✨ Album AI</a>
            </h1>
            <form action='/' method='get' class='flex my-0 grow'>
              <input
                type='text'
                name='query'
                value='{{query}}'
                placeholder='Ask Anything...'
                class='grow px-4 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-primary dark:bg-zinc-800 dark:border-zinc-700'
              />
              <button
                type='submit'
                class='px-6 py-2 bg-primary/60 text-white rounded-r-md hover:bg-primary focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 dark:focus:ring-offset-zinc-900'
              >Ask</button>
            </form>
          </div>
        </header>
        <div class="container mx-auto bg-zinc-800/60 rounded-xl px-14 py-10 shadow-md mb-10 min-h-96 prose 
        prose-invert prose-img:rounded-xl prose-img:max-h-[500px] prose-img:mx-auto
        ">
          <h2 class="text-2xl font-bold">
            Answer:
          </h2>
          <p class="border-b border-zinc-200/10"></p>
          <div
            class=''
            id='gallery'
          >
          <!-- Gallery images will be dynamically inserted here -->
          </div>  
        </div>
      {{else}}
        <!-- Initial page -->
        <div class='flex flex-col items-center justify-center min-h-screen'>
          <h1 class='text-7xl mb-0 text-primary select-none'>✨ Art AI</h1>
          <h4 class='mb-8 text-gray-100/80'>Talk To Your Art</h4>
          
          <!-- Image Upload Area -->
          <div class="w-full max-w-3xl">
            <div id="upload-zone" class="border-2 border-dashed border-primary/40 rounded-lg p-8 text-center hover:border-primary/60 transition-colors cursor-pointer">
              <input type="file" id="file-input" class="hidden" accept="image/*" capture="environment">
              <div class="space-y-4">
                <div id="preview-area" class="hidden">
                  <img id="preview-image" class="max-h-64 mx-auto rounded-lg shadow-lg mb-4">
                </div>
                <div id="upload-prompt" class="space-y-2">
                  <svg class="mx-auto h-12 w-12 text-primary/60" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                  </svg>
                  <div class="text-lg">
                    Drop your artwork image here or
                    <span class="text-primary hover:text-primary/80">browse</span>
                  </div>
                  <p class="text-gray-400">Supports JPG, PNG, WEBP</p>
                </div>
              </div>
            </div>
            
            <!-- Upload Button -->
            <button id="upload-button" class="mt-4 w-full px-6 py-3 bg-primary/60 text-white rounded-lg hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 dark:focus:ring-offset-zinc-900 transition-colors hidden">
              Analyze Artwork
            </button>
          </div>
        </div>

        <!-- Add JavaScript for handling file upload -->
        <script>
          const uploadZone = document.getElementById('upload-zone');
          const fileInput = document.getElementById('file-input');
          const previewArea = document.getElementById('preview-area');
          const previewImage = document.getElementById('preview-image');
          const uploadPrompt = document.getElementById('upload-prompt');
          const uploadButton = document.getElementById('upload-button');

          // Handle drag and drop
          uploadZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadZone.classList.add('border-primary');
          });

          uploadZone.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('border-primary');
          });

          uploadZone.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadZone.classList.remove('border-primary');
            const file = e.dataTransfer.files[0];
            if (file && file.type.startsWith('image/')) {
              handleFile(file);
            }
          });

          // Handle click to upload
          uploadZone.addEventListener('click', () => {
            fileInput.click();
          });

          fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
              handleFile(file);
            }
          });

          function handleFile(file) {
            const reader = new FileReader();
            reader.onload = (e) => {
              previewImage.src = e.target.result;
              previewArea.classList.remove('hidden');
              uploadPrompt.classList.add('hidden');
              uploadButton.classList.remove('hidden');
            };
            reader.readAsDataURL(file);
          }

          // Handle upload button click
          uploadButton.addEventListener('click', async () => {
            const file = fileInput.files[0];
            if (!file) return;

            uploadButton.disabled = true;
            uploadButton.innerHTML = `
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Analyzing...
            `;

            const formData = new FormData();
            formData.append('image', file);

            try {
              const response = await fetch('/api/v1/file/upload', {
                method: 'POST',
                body: formData,
              });

              if (!response.ok) {
                throw new Error('Upload failed');
              }

              const result = await response.json();
              
              // TODO: Handle successful upload - implement similarity search
              console.log('Upload successful:', result);
              
              // For now, show success message
              uploadButton.innerHTML = `
                <svg class="h-5 w-5 text-white inline-block mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Analysis Complete
              `;
              
            } catch (error) {
              console.error('Upload error:', error);
              uploadButton.innerHTML = 'Upload Failed - Try Again';
              uploadButton.disabled = false;
            }
          });
        </script>
      {{/if}}
    </div>
<script>
  console.log('Gallery script is running');

  function renderMarkdownToGallery(message) {
    const gallery = document.getElementById('gallery');
    if (!gallery) {
      console.error('Gallery element not found');
      return;
    }
    console.log('Rendering markdown to gallery');
    // Convert Markdown to HTML using marked
    const htmlContent = marked.parse(message);
    // Set the HTML content to the gallery element
    gallery.innerHTML = htmlContent;
  }
  // Use DOMContentLoaded event
  document.addEventListener('DOMContentLoaded', () => {
    // Assume message is injected through server-side rendering
    const answer = `{{{ answer }}}`;
    renderMarkdownToGallery(answer);
  });
</script>
  </body>
</html>